{
  "title": "客户端笔记",
  "cells": [
    {
      "type": "code",
      "language": "lua",
      "data": "GameRuleSettingView.lua -- 设置视图\nAdvanceSettingView.lua -- 个性化设置视图\n\n--调用关系\ngameDeskLayer -> {\n    gameData -> {\n        gamePlayer -> {\n            gameLogic\n        }\n    }\n}\n\n--进入游戏规则调用关系\nDeskLayer -> {\n    BaseDesk3DLayer -> {\n        BaseDeskLayer -> {\n            ManageTablesDialog -> {\n                CircleView -> ManageTablesView -> {\n                    CreateTableView -> {\n                        UnionGameRuleSettingView -> {\n                            --根据GameType.GAME_PACKAGE[gameType]gameType的种类定位到具体需要调用的游戏包的路径\n                            GameRuleSettingContext -> {\n                                --到这一层还是游戏包内的类\n                                GameConfig.RuleSettingView -> {\n                                    GuangdongGameRuleSettingView -> {\n                                        GuangdongGameRuleSettingItemCollectionView -> {\n                                            BasicGameRuleSettingView\n                                            GuangdongAdvanceGameRuleSettingView\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n获取游戏数据getGameData\n通过获取config和gameType定位到玩法包下面的游戏gameconfig文件\n\n\nGuangdongAdvancedGameRuleSettingView\nGuangdongGameRuleSettingView\nBaseGameRuleSettingView\nUnionGameRuleSettingView\nGameHandler, LoginC\n\nclsGameHandler:_createTable()\nClient_CreateDesk    = 651  // 创建游戏\n\nBaseDeskLayer包含所有消息协议对应的处理方法\n判断传入消息ID属于哪个消息协议处理\n\nBaseSocket:addDataListener添加回调\n\nGamePacketQueue:push    放入消息队列\nGamePacketQueue:pop     弹出消息队列\nscheduler从消息队列取出消息由table里的对象的callback函数处理\n\n问题：\n1. 从哪个接口什么机制接受消息\n2. 如何启动scheduler处理线程\n\n根据协议ID从mDic取出对应的callback list\n\nBaseDesk(3D/2D)Layer\n1. 控制桌子上的逻辑和动画，如创建桌子，买马赖子抓牌等\n\nloadUI -> createTable -> drawHandCardFinish -> 买马翻赖子\n\n重写子类allocMj(分配麻将数据), 根据传入的extra data判断是否带翻赖子 \n\ncardGroupView:showLaiziFlag(self:getGameData():getLaiziCardData()) 添加鬼字标签\n\n从响应事件中获取textbox的值，赋值给框架类的属性，或者直接赋值给slidebar-textbox\n\n\n\n>>>打包客户端apk\n1. 选择android-api-4.4.2\n2. 运行./build_native_release.sh\n3. 需要的依赖包：Pushlib／WXPay／libcocos2dx／sharesdk_res\neclipse\n4. eclipse运行run-as-android-application（运行前需要clean项目）\nant\n4. 运行ant clean\n5. 在项目及其依赖项目运行android update project -p . -t 6（-t参数为指定android-API版本，使用android list targets查看API列表）\n6. ant debug/ant release\n\n\n\n>>>本地运行配牌工具\n配牌地址：\nhttp://120.92.234.72:3000/peipai/peipai.html?gameType=1&&token=79438ee16a41ae879beb46af407c8eba\n\n\n\n>>>本地运行机器人匹配\n1. GameSocket.lua\nfunction GameSocket:enter(host, port, callback)\n    local userId=User.userId\n    local token=User.token\n  \tlocal loginParam={\n  \t\tuser_id=userId,\n      token=token,\n  \t}\n  -- self.targetRoomId=roomId\n  -- self.targetTableId=tableId\n     --接入robot 这里是网关地址\n     host = \"127.0.0.1\"\n     port = 8000\n    -- host = \"10.20.79.223\"\n    -- port = 9030\n\tself:login(host, port, loginParam, callback)\nend\n\n2. GameHTTPRequest.lua\n--接入robot这里是room地址\n--clsGameHTTPRequest.URL=\"http://172.18.64.126:9000/\"--内网\nclsGameHTTPRequest.URL=\"http://127.0.0.1:6001/\"--测试外网\n\n\n>>>测试内网\n客户端配置\nconstant.net game_service/platform/gate\n后台游戏服务\netcd/platform/localhost->local_ip\n\n\n>>>测试外网\n1. file:NetConstants\nroom服务地址：NetConstants.LOCAL_GAMEWEB_URL\ngame服务地址：NetConstants.LOCAL_GAME_SERVER[GameType.GUANGDONG_MAJHONG]\n平台服务地址：local server = NetConstants.SERVER_OUTER_TEST\n外网服务“平台” “网关” “房间” “游戏”都在120.92.234.72上\n2. file:GameConstants\n更改为链接本地服务器\nGameConstants.LOCAL_GAME_HOST=true--是否连接本地设置的游戏服务器\n3. file:main\n更改客户端自动更新配置\n\n\n>>>robot快速匹配规则设置\ngame_logic.go: func GetMatchGameRule()\n\n\n>>>游客登陆\nfile:GameConstant\nGameConstants.GUEST_LOGIN\n\n\n\n"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}