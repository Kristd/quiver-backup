{
  "title": "Raft协议",
  "cells": [
    {
      "type": "text",
      "data": "1. 一个节点有三种状态，跟随者，候选者，领导者<div>2. 所有节点的起始状态都是跟随者</div><div>3. 当一个节点没有收到领导者的消息时会自动成为候选者，并向其他节点发出请求投票的请求</div><div>4. 当候选者收到大部分的投票时（超过半数）就自动成为了领导者</div><div><br></div><div>总体描述</div><div>5. 领导者负责接收消息及同步消息的流程</div><div>6. 领导者接受到从客户端发来的消息，此时日志并没有真正的写入</div><div>7. 领导者下一步向各个跟随者发出同步请求，并且收到大部分跟随者的确认响应时，日志才真正的落地写入</div><div>8. 领导者随即向所有跟随者发出写入确认，各个节点同步写入领导者更新的数据</div><div><br></div><div>领导者选举</div><div>9. 在选举的过程中，每个节点都有两个超时设置</div><div>10. 选举超时设置，选举超时设置用于每个跟随者成为候选者的等待时间，每个节点的选举超时时间都为随机数，它的值介于150ms到300ms之间</div><div>11. 当一个节点的选举时间超时后，该节点将自动成为候选者，并发起一个领导者选举流程，向其他节点发起投票请求</div><div>12. 如果一个跟随者在这个流程中还没发出过投票，它将响应候选者的请求响应投票，<b><i>并重置自己的选举超时时间</i></b></div><div>13. 当一个候选者接受到大部分的选票时，它将成为领导者，并且开始向其他跟随者每隔一段时间发送心跳消息</div><div>14. 领导者会持续的对跟随者发起心跳以表示自己仍然在线，跟随者在每次受到领导者的心跳请求时都会重置自己的选举超时设置，相反地，如果跟随者没有收到领导者的心跳请求则会在一段时间后（选举超时）成为候选者并对其他节点发起选举流程</div><div>15. 两个节点同时发起选举请求，并且都获得同样票数的情况，则两个节点重置选举超时时间并重新等候超时，然后再发起选举流程，直至最后领导者被大部分节点投票选举出来</div><div><br></div><div>日志复制</div><div>16. 节点间日志复制使用和心跳一样的消息，首先客户端向领导者发送更新消息</div><div>17. 领导者接受到更新消息并加到日志末尾，此时更新还没真正的写入，领导者通过下一次心跳把更新消息同样发到了每个跟随者的节点上</div><div>18. 当领导者接受到大部分节点的响应更新消息后，领导者才会真正把变更落地，然后向各跟随者节点发出确认变更消息，跟随者收到领导者的通知后，同样把变更落地</div><div><br></div><div>日志同步</div><div>19. 假设有两个隔离的网络A和网络B（网络A节点数目大于网络B），两个网络均通过选举流程达到了稳定状态（没有节点发起新的选举流程）</div><div>20. 客户端分别向两个网络发起变更请求，使得两个网络获得两个不同的变更消息并更新自身的值</div><div>21. 现在合并两个网络，网络A和网络B的领导者同时向当前和对方网络的节点发出心跳，并附带自己当前的节点的值</div><div>22. 网络B的领导者接受到网络A的领导者的心跳，发现网络A的领导者有更多的跟随者节点，此时网络B的领导者将会把自身降级为跟随者，并根据网络A的心跳更新自身节点的值，网络B的其他节点也会根据网络A的领导者心跳更新自身的状态，使整个网络达到同步状态</div><div><br></div><div><br></div><div><br></div><div><br></div>"
    }
  ]
}